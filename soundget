#!/usr/bin/env python3

import sys
import json
import urllib.request
import re
from os import path
import argparse

CLIENT_ID = "93e33e327fd8a9b77becd179652272e2"

def resolve_url(url):
    return f"http://api.soundcloud.com/resolve?url={url}&client_id={CLIENT_ID}"

def is_valid_username(username):
    if re.match("[a-zA-Z][a-zA-Z0-9_-]*", username) != None:
        return True
    return False

def strip_author_from_title(title, author):
    if title.startswith(author):
        sans_author = title[len(author):].lstrip()
        if sans_author[0] in "-:.":
            return sans_author[1:].lstrip()
    else:
        return title

def format_stream(stream_url):
    return "{}?client_id={}".format(stream_url, CLIENT_ID)

def create_m3u(filename):
    file = open(filename, "w")
    file.write("#EXTM3U\n")
    file.close()


class TracksList:
    def __init__(self, tracks):
        self.tracks = tracks

    def print_to_stdout(self):
        for track in self.tracks:
            if track["streamable"]:
                print(format_stream(track["stream_url"]))

    def print_to_m3u(self, file):
        for track in self.tracks:
            if track["streamable"]:
                author = track["user"]["username"]
                title = strip_author_from_title(track["title"], author)
                stream_url = format_stream(track["stream_url"])
                file.write(f"#EXTINF:-1,{author} - {title}\n{stream_url}\n")


parser = argparse.ArgumentParser(
                      description="Get list of tracks from soundcloud.com")
parser.add_argument('--m3u',
                    help='output the track list into an m3u8 playlist file')
parser.add_argument('USERNAME',
                    help='username that follows after www.soundcloud.com')

args = parser.parse_args()

if is_valid_username(args.USERNAME):
    url = resolve_url(f"https://www.soundcloud.com/{args.USERNAME}/tracks")
    with urllib.request.urlopen(url) as response:
        tracks = TracksList(json.load(response))
        if args.m3u:
            try:
                if not path.exists(args.m3u):
                    file = create_m3u_file(args.m3u)
                else:
                    file = open(args.m3u, 'w+')
                tracks.print_to_m3u(file)
            except IOError:
                print(f"ERROR trying to open {args.m3u}",
                      file=sys.stderr)
        else:
            tracks.print_to_stdout()
else:
    print(("Username is invalid.",
           "A valid username must contain only characters [a-zA-Z0-9_-]"),
          file=sys.stderr)
